/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_CatalogStats.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


CatalogStats::~CatalogStats() noexcept {
}


void CatalogStats::__set_sizeInBytes(const int64_t val) {
  this->sizeInBytes = val;
}

void CatalogStats::__set_rowCount(const int64_t val) {
  this->rowCount = val;
__isset.rowCount = true;
}

void CatalogStats::__set_colStats(const std::vector<std::map<std::string, std::string> > & val) {
  this->colStats = val;
}

uint32_t CatalogStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sizeInBytes = false;
  bool isset_colStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sizeInBytes);
          isset_sizeInBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rowCount);
          this->__isset.rowCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colStats.clear();
            uint32_t _size336;
            ::apache::thrift::protocol::TType _etype339;
            xfer += iprot->readListBegin(_etype339, _size336);
            this->colStats.resize(_size336);
            uint32_t _i340;
            for (_i340 = 0; _i340 < _size336; ++_i340)
            {
              {
                this->colStats[_i340].clear();
                uint32_t _size341;
                ::apache::thrift::protocol::TType _ktype342;
                ::apache::thrift::protocol::TType _vtype343;
                xfer += iprot->readMapBegin(_ktype342, _vtype343, _size341);
                uint32_t _i345;
                for (_i345 = 0; _i345 < _size341; ++_i345)
                {
                  std::string _key346;
                  xfer += iprot->readString(_key346);
                  std::string& _val347 = this->colStats[_i340][_key346];
                  xfer += iprot->readString(_val347);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_colStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sizeInBytes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CatalogStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CatalogStats");

  xfer += oprot->writeFieldBegin("sizeInBytes", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->sizeInBytes);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.rowCount) {
    xfer += oprot->writeFieldBegin("rowCount", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->rowCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("colStats", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->colStats.size()));
    std::vector<std::map<std::string, std::string> > ::const_iterator _iter348;
    for (_iter348 = this->colStats.begin(); _iter348 != this->colStats.end(); ++_iter348)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter348).size()));
        std::map<std::string, std::string> ::const_iterator _iter349;
        for (_iter349 = (*_iter348).begin(); _iter349 != (*_iter348).end(); ++_iter349)
        {
          xfer += oprot->writeString(_iter349->first);
          xfer += oprot->writeString(_iter349->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CatalogStats &a, CatalogStats &b) {
  using ::std::swap;
  swap(a.sizeInBytes, b.sizeInBytes);
  swap(a.rowCount, b.rowCount);
  swap(a.colStats, b.colStats);
  swap(a.__isset, b.__isset);
}

CatalogStats::CatalogStats(const CatalogStats& other350) {
  sizeInBytes = other350.sizeInBytes;
  rowCount = other350.rowCount;
  colStats = other350.colStats;
  __isset = other350.__isset;
}
CatalogStats::CatalogStats( CatalogStats&& other351) noexcept {
  sizeInBytes = std::move(other351.sizeInBytes);
  rowCount = std::move(other351.rowCount);
  colStats = std::move(other351.colStats);
  __isset = std::move(other351.__isset);
}
CatalogStats& CatalogStats::operator=(const CatalogStats& other352) {
  sizeInBytes = other352.sizeInBytes;
  rowCount = other352.rowCount;
  colStats = other352.colStats;
  __isset = other352.__isset;
  return *this;
}
CatalogStats& CatalogStats::operator=(CatalogStats&& other353) noexcept {
  sizeInBytes = std::move(other353.sizeInBytes);
  rowCount = std::move(other353.rowCount);
  colStats = std::move(other353.colStats);
  __isset = std::move(other353.__isset);
  return *this;
}
void CatalogStats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CatalogStats(";
  out << "sizeInBytes=" << to_string(sizeInBytes);
  out << ", " << "rowCount="; (__isset.rowCount ? (out << to_string(rowCount)) : (out << "<null>"));
  out << ", " << "colStats=" << to_string(colStats);
  out << ")";
}

}}} // namespace
