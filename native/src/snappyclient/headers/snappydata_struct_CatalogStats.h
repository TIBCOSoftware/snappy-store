/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_CATALOGSTATS_H
#define SNAPPYDATA_STRUCT_CATALOGSTATS_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"
#include "snappydata_struct_UpdateResult.h"
#include "snappydata_struct_StatementResult.h"
#include "snappydata_struct_BucketOwners.h"
#include "snappydata_struct_CatalogStorage.h"
#include "snappydata_struct_CatalogSchemaObject.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _CatalogStats__isset {
  _CatalogStats__isset() : rowCount(false) {}
  bool rowCount :1;
} _CatalogStats__isset;

class CatalogStats {
 public:

  CatalogStats(const CatalogStats&);
  CatalogStats(CatalogStats&&) noexcept;
  CatalogStats& operator=(const CatalogStats&);
  CatalogStats& operator=(CatalogStats&&) noexcept;
  CatalogStats() : sizeInBytes(0), rowCount(0) {
  }

  virtual ~CatalogStats() noexcept;
  int64_t sizeInBytes;
  int64_t rowCount;
  std::vector<std::map<std::string, std::string> >  colStats;

  _CatalogStats__isset __isset;

  void __set_sizeInBytes(const int64_t val);

  void __set_rowCount(const int64_t val);

  void __set_colStats(const std::vector<std::map<std::string, std::string> > & val);

  bool operator == (const CatalogStats & rhs) const
  {
    if (!(sizeInBytes == rhs.sizeInBytes))
      return false;
    if (__isset.rowCount != rhs.__isset.rowCount)
      return false;
    else if (__isset.rowCount && !(rowCount == rhs.rowCount))
      return false;
    if (!(colStats == rhs.colStats))
      return false;
    return true;
  }
  bool operator != (const CatalogStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CatalogStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CatalogStats &a, CatalogStats &b);

inline std::ostream& operator<<(std::ostream& out, const CatalogStats& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
