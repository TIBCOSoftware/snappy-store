apply plugin: 'wrapper'

if ((rootProject.name.contains('native') && !rootProject.hasProperty('skipNative'))
    || rootProject.hasProperty('native')) {

  apply plugin: 'cpp'

  buildRoot = buildRoot.trim()
  def osDir = System.properties['os.name'].toLowerCase()
  if (!buildRoot.isEmpty()) {
    buildDir = new File(buildRoot, osDir + '/' +  project.path.replace(':', '/'))
  } else {
    buildDir = 'build-artifacts/' + osDir
  }

  // C++ client
  model {
    components {
      snappyclient(NativeLibrarySpec) {
        binaries.all {
          // Define toolchain-specific compiler and linker options
          if (toolChain in Gcc) {
            cppCompiler.args '-I', "${projectDir}/src/snappyclient/headers/thrift",
                             '-I', '/export/shared/software/boost/1.59.0/linux64/include',
                             '-I', '/export/shared/software/thrift/1.0.0-dev/linux64/include'
            if (buildType == buildTypes.debug) {
              cppCompiler.args '-g3', '-O0'
              linker.args '-L', '/export/shared/software/boost/1.59.0/linux64/debug/lib',
                          '-L', '/export/shared/software/boost/1.59.0/linux64/lib',
                          '-L', '/export/shared/software/thrift/1.0.0-dev/linux64/debug/lib',
                          '-L', '/export/shared/software/thrift/1.0.0-dev/linux64/lib'
            } else {
              cppCompiler.define 'NDEBUG'
              cppCompiler.args '-O3'
              linker.args '-L', '/export/shared/software/boost/1.59.0/linux64/lib',
                          '-L', '/export/shared/software/thrift/1.0.0-dev/linux64/lib'
            }

            linker.args '-Wl,-Bstatic', '-lthrift', '-lboost_system',
                        '-lboost_chrono', '-lboost_thread', '-lboost_log',
                        '-lboost_log_setup', '-lboost_filesystem', '-lboost_date_time',
                        '-Wl,-Bdynamic', '-lcrypto', '-lssl', '-lgmp', '-lpthread'
          }
        }
      }
    }
    buildTypes {
      debug
      release
    }
    platforms {
      x64 {
        architecture "x86_64"
      }
    }

    binaries {
      all {
        // Define toolchain-specific compiler and linker options
        if (toolChain in Gcc) {
          cppCompiler.args '-Wall', '-Wno-unused-local-typedefs', '-DPIC', '-fPIC',
                           '-std=c++11', '-I', '/usr/include/x86_64-linux-gnu',
                           '-I', '/export/shared/software/boost/1.59.0/linux64/include',
                           '-I', '/export/shared/software/thrift/1.0.0-dev/linux64/include'
          if (buildType == buildTypes.debug) {
            cppCompiler.args '-g3', '-O0'
          } else {
            cppCompiler.define 'NDEBUG'
            cppCompiler.args '-O3'
          }

          linker.args '-rdynamic', '-B/usr/lib/x86_64-linux-gnu', '-ldl'
        } else if (toolChain in VisualCpp) {
          if (buildType == buildTypes.debug) {
            cppCompiler.args '/Zi'
              linker.args '/DEBUG'
          } else {
            cppCompiler.args '/Zi'
          }
        }
      }
    }
  }
}

task product(dependsOn: assemble) << {
  def productDir = "${buildDir}/snappyclient"

  // copy the release libraries
  copy {
    from "${buildDir}/libs/snappyclient/shared/release", "${buildDir}/libs/snappyclient/static/release"
    into "${productDir}/lib"
  }
  // copy the debug libraries
  copy {
    from "${buildDir}/libs/snappyclient/shared/debug", "${buildDir}/libs/snappyclient/static/debug"
    into "${productDir}/lib/debug"
  }
  // copy the public headers
  copy {
    from "${projectDir}/src/snappyclient/headers"
    into "${productDir}/include"
  }

  if (project.hasProperty('copyTo')) {
    copy {
      from productDir
      into copyTo
    }
  }
}
